#===============================================================================
#
#                         OOOO
#                       OOOOOOOO
#      PPPPPPPPPPPPP   OOO    OOO   PPPPPPPPPPPPP
#    PPPPPPPPPPPPPP   OOO      OOO   PPPPPPPPPPPPPP
#   PPP         PPP   OOO      OOO   PPP         PPP
#  PPP          PPP   OOO      OOO   PPP          PPP
#  PPP          PPP   OOO      OOO   PPP          PPP
#  PPP          PPP   OOO      OOO   PPP          PPP
#   PPP         PPP   OOO      OOO   PPP         PPP
#    PPPPPPPPPPPPPP   OOO      OOO   PPPPPPPPPPPPPP
#     PPPPPPPPPPPPP   OOO      OOO   PPP
#               PPP   OOO      OOO   PPP
#               PPP   OOO      OOO   PPP
#               PPP   OOO      OOO   PPP
#               PPP    OOO    OOO    PPP
#               PPP     OOOOOOOO     PPP
#              PPPPP      OOOO      PPPPP
#
# @file:   simplerules.txt
# @author: Hugh Spahr
# @date:   1/31/2013
#
# @note:   Open Pinball Project
#          Copyright© 2013, Hugh Spahr
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#===============================================================================
#
# This is a rules file for the Sharp Shooter 3 pinball machine.
#
#===============================================================================

SOLENOID_CARDS       2
{
   #Name                      Card  I/O   Flags       InitKick    DutyCycle   MinOff	Desc
   Sol_Upper_Lft_Pop          1     1     USE_SWITCH      48         0        0			"UpLftPop"
   Sol_Upper_Ctr_Pop          1     2     USE_SWITCH      48         0        0			"UpCtrPop"
   Sol_Top_Drop_Rubber        1     4     USE_SWITCH       0         0        0			"TopDropRbr"
   Sol_Drop_Bank              1     5     USE_SWITCH      48         0        0			"DropBank"
   Sol_Kickout_Hole           1     8     AUTO_CLR        48         0        0			"KickOut"
   
   Sol_Btm_Lft_Sling          2     1     USE_SWITCH      48         0        0			"BtmLftSling"
   Sol_Lft_Flipper            2     2     USE_SWITCH      48         4        0			"LftFlip"
   Sol_Ball_In_Play           2     4     AUTO_CLR        48         0        0			"BallInPlay"
   Sol_Rght_Flipper           2     5     USE_SWITCH      48         4        0			"RghtFlip"
   Sol_Btm_Low_Pop            2     7     USE_SWITCH      48         0        0			"BtmLowPop"
   Sol_Btm_Up_Pop             2     8     USE_SWITCH      48         0        0			"BtmUpPop"
}

INPUT_CARDS          2
{
   #Name                      Card  I/O   Type				Desc
   Inp_Spinner                1     1     FALL_EDGE			"Spinner"			
   Inp_Ctr_Rght_Rubber        1     2     FALL_EDGE			"CtrRghtRbr"
   Inp_Horshoe_Rollover       1     3     FALL_EDGE			"HorseRoll"
   Inp_Below_Kickout_Rollover 1     4     FALL_EDGE			"BlwKickRoll"
   Inp_Upper_Rubber           1     5     FALL_EDGE			"UpRbr"
   Inp_Upper_Rght_Rollover    1     6     FALL_EDGE			"UpRghtRoll"
   Inp_Upper_Ctr_Rollover     1     7     FALL_EDGE			"UpCtrRoll"
   Inp_Upper_Lft_Rollover     1     8     FALL_EDGE			"UpLftRoll"
   Inp_Upper_Lft_Top_Trgt     1     11    FALL_EDGE	    	"UpLftTopTrgt"
   Inp_Upper_Lft_Btm_Trgt     1     12    FALL_EDGE			"UpLftBtmTrgt"
   Inp_Ctr_Rght_Rollover      1     14    FALL_EDGE			"CtrRghtRoll"
   Inp_Ctr_Ctr_Rollover       1     15    FALL_EDGE			"CtrCtrRoll"
   Inp_Ctr_Lft_Rollover       1     16    FALL_EDGE			"CtrLftRoll"
   
   Inp_Btm_Lft_InLn_Rollover  2     1     FALL_EDGE			"BtmLftInLnRoll"
   Inp_Btm_Lft_OutLn_Rollover 2     2     FALL_EDGE			"BtmLftOutLnRoll"
   Inp_Ctr_Low_Rollover       2     3     FALL_EDGE			"CtrLowRoll"
   Inp_Drop_Bank_Miss         2     4     FALL_EDGE			"DropBnkMiss"
   Inp_Btm_Rght_Rubber        2     5     FALL_EDGE			"BtmRghtRbr"
   Inp_Btm_Rght_Low_Rubber    2     6     FALL_EDGE			"BtmRghtLowRbr"
   Inp_Slam_Tilt              2     7     FALL_EDGE			"SlamTilt"
   Inp_Drop_Trgt_1S           2    10     FALL_EDGE			"DrpTrgt1S"
   Inp_Drop_Trgt_2H           2    11     FALL_EDGE			"DrpTrgt2H"
   Inp_Drop_Trgt_3O           2    12     FALL_EDGE			"DrpTrgt3O"
   Inp_Drop_Trgt_4O           2    13     FALL_EDGE			"DrpTrgt4O"
   Inp_Drop_Trgt_5T           2    14     FALL_EDGE			"DrpTrgt5T"
   Inp_Drop_Trgt_6E           2    15     FALL_EDGE			"DrpTrgt6E"
   Inp_Drop_Trgt_7R           2    16     FALL_EDGE			"DrpTrgt7R"
}

LED_CARDS            1
{
   #Name                      Card  I/O		Desc
   Led_Inlane_Left            1     1		"InlaneRght"
   Led_Inlane_Center          1     2		"InlaneCtr"
   Led_Inlane_Right           1     3		"InlaneLft"
   Led_Left_Target1           1     4		"LftTrgt1"
   Led_Left_Target2           1     5		"LftTrgt2"
   Led_Right_Target1          1     6		"RghtTrgt1"
   Led_Right_Target2          1     7		"RghtTrgt2"
   Led_Special                1     8		"Special"
}

VARIABLES
{
   #Name                      InitVal
   Var_credits                0
   Var_partCreditsNum         0
   Var_partCreditsDenom       2
   Var_creditsInRow           0
   Var_extraCredit            4
   Var_numPlayers             0
   Var_maxPlayers             4
   Var_currPlayer             0
   Var_ballNum                0
   Var_ballsPerGame           3
   Var_highScore              10000
   Var_targets                0
   Var_kick_retries           0
   Var_prev_flipper           0
   Var_tilted                 0
}

INDEXED_VARIABLES
{
   #Name                      NumEntries  InitVals
   IndVar_score               4           {0  0  0  0}
   IndVar_InlaneLights        4           {0  0  0  0}
   IndVar_scoreLvl            4           {0  0  0  0}
   IndVar_specialLvl          4           {0  0  0  0}
}

SOUND_CLIPS
{
   #Name                   Location
   Sound_Wah_Wuh           "sounds/wah_wuh.wav"
   Sound_Ding_Ding         "sounds/ding_ding.wav"
   Sound_Open_Door         "sounds/opendoor.wav"
   Sound_Jump              "sounds/jump.wav"
   Sound_Waterfall1        "sounds/wfall1.wav"
   Sound_Waterfall2        "sounds/wfall2.wav"
   Sound_Waterfall3        "sounds/wfall3.wav"
}

BGND_CLIPS
{
   #Name                   Location
   Sound_BgndTrack         "sounds/bgndtrack.mp3"
}

VIDEO_CLIPS
{
   #Name                   Location                      	Screen
   Video_Defcon17          "images/Defcon17Loop.mp4"     	MAIN_SCR
   Video_Defcon19          "images/DefconTest.mp4"       	MAIN_SCR
}

IMAGES
{
   #Name                   Location
   Image_Full_Band         "graphics/full_bgnd_image.jpg"   MAIN_SCR
   Image_Left_Guy          "graphics/left_guy.jpg"   		MAIN_SCR
   Image_LeftCtr_Guy       "graphics/lftctr_guy.jpg"   		MAIN_SCR
   Image_Right_Guy         "graphics/right_guy.jpg"   		MAIN_SCR
}

TICK_TIME                  20                            # 20 ms tick timer

TIMERS
{
   #Name                   NumMs
   Timeout_Kickout_Timer   1000                          # 1 second
   Timeout_Ball_Locate     5000                          # 5 seconds
   Timeout_Special_Timer   30000                         # 30 seconds
}

PROCESS_CHAINS
{
   #Name                   Processing
   Proc_Tilt               { if (Inp_Tilt_Switch)
                              {(DISABLE_SOLENOIDS) (MODE = Mode_Tilt)}
                           }
   
   Proc_Flipper            {if (Sol_Left_Flipper && ((Var_prev_flipper & SOL_LEFT_FLIPPER) == 0))
                              (LED_ROT_LEFT, (Led_Inlane_Left | Led_Inlane_Center | Led_Inlane_Right),
                              IndVar_InlaneLights[Var_currPlayer])
                           if (Sol_Right_Flipper && ((Var_prev_flipper & SOL_RIGHT_FLIPPER) == 0))
                              (LED_ROT_RIGHT, (Led_Inlane_Left | Led_Inlane_Center | Led_Inlane_Right),
                              IndVar_InlaneLights[Var_currPlayer])
                           (Var_prev_flipper = (Sol_Left_Flipper | Sol_Right_Flipper))}
   
   Proc_Inlane             {if (Inp_Inlane_Left && ((IndVar_InlaneLights[Var_currPlayer] & Led_Inlane_Left) == 0))
                              {(IndVar_InlaneLights[Var_currPlayer] |= Led_Inlane_Left)
                              (LED_ON, Led_Inlane_Left)}
                           if (Inp_Inlane_Center && ((IndVar_InlaneLights[Var_currPlayer] & Led_Inlane_Center) == 0))
                              {(IndVar_InlaneLights[Var_currPlayer] |= Led_Inlane_Center)
                              (LED_ON, Led_Inlane_Center)}
                           if (Inp_Inlane_Right && ((IndVar_InlaneLights[Var_currPlayer] & Led_Inlane_Right) == 0))
                              {(IndVar_InlaneLights[Var_currPlayer] |= Led_Inlane_Right)
                              (LED_ON, Led_Inlane_Right)}
                           if ((IndVar_InlaneLights[Var_currPlayer] & (Led_Inlane_Left | Led_Inlane_Center | Led_Inlane_Right)) ==
                              (Led_Inlane_Left | Led_Inlane_Center | Led_Inlane_Right))
                              (MODE = Mode_Inlane_Complete)}
   
   Proc_Targets            {if (Inp_Left_Target1)
                              {(LED_ON, Led_Left_Target1) (Var_targets |= Led_Left_Target1)}
                           if (Inp_Left_Target2)
                              {(LED_ON, Led_Left_Target2) (Var_targets |= Led_Left_Target2)}
                           if (Inp_Right_Target1)
                              {(LED_ON, Led_Right_Target1) (Var_targets |= Led_Right_Target1)}
                           if (Inp_Right_Target2)
                              {(LED_ON, Led_Right_Target2) (Var_targets |= Led_Right_Target2)}
                           if ((Var_targets & (Led_Left_Target1 | Led_Left_Target2 | Led_Right_Target1 | Led_Right_Target2)) ==
                              (Led_Left_Target1 | Led_Left_Target2 | Led_Right_Target1 | Led_Right_Target2))
                              (MODE = Mode_Targets_Complete)}
   
   Proc_Kickout_Hole       {if (Sol_Kickout_Hole)
                              (KICK Sol_Kickout_Hole)}
   Proc_Ball_Drain         {if (Sol_Ball_In_Play)
                              (MODE = Mode_End_Of_Ball)}
                              
   Proc_Tilt_Init          {(Var_tilted = 1)
                           if (Sol_Kickout_Hole)
                              {(KICK Sol_Kickout_Hole) (Var_kick_retries = 0) (START Timeout_Kickout_Timer)}
                           (START Timeout_Ball_Locate)}
   
   Proc_Tilt_State         {if (Sol_Ball_In_Play)
                              {(ENABLE_SOLENOIDS) (MODE = Mode_End_Of_Ball)}
                           if (EXPIRED Timeout_Kickout_Timer)
                              {if (Sol_Kickout_Hole)
                                 {(Var_kick_retries++)
                                 if (Var_kick_retries > 5)
                                    {(MODE = Mode_Error) (TEXT = "Can't clear kickout hole")}
                                 (START Timeout_Kickout_Timer) (KICK Sol_Kickout_Hole)}}
                           if (EXPIRED Timeout_Ball_Locate)
                              {(MODE = Mode_Error) (TEXT = "Lost Ball")}}
   
   Proc_Init               {(DISABLE_SOLENOIDS)
                           if (Var_credits == 0)
                              (MODE = Mode_Attract)
                           else
                              (MODE = Mode_Press_Start)}
   
   Proc_Add_Coin           {if (Inp_Coin_Drop) 
                              {(Var_creditsInRow++) (Var_partCreditsNum++)
                              if (Var_creditsInRow == Var_extraCredit)
                                 {(Var_credits++) (Var_creditsInRow = 0)}
                              if (Var_partCreditsNum == Var_partCreditsDenom)
                                 {(Var_credits++) (Var_partCreditsNum = 0)}}
                           if (Inp_Start_Button)
                              (Var_creditsInRow = 0)}
   
   Proc_Press_Start        {if (Inp_Start_Button && Var_credits && (Var_ballNum == 0))
                              {if (Var_numPlayers < Var_maxPlayers)
                                 {(Var_credits--) (Var_numPlayers++)}}
                           if (MODE == Mode_Press_Start)
                              (MODE = Mode_Start_Game)}
   
   Proc_Start_and_Coin     {Proc_Add_Coin, Proc_Press_Start}
   
   Proc_Init_Game          {(IndVar_score = 0) (IndVar_InlaneLights = 0)
                              (Var_ballNum = 0) (IndVar_scoreLvl = 0)
                              (IndVar_specialLvl = 0)(ENABLE_SOLENOIDS)}
   
   Proc_Start_Game         {if (Inp_Ball_At_Plunger || Sol_Kickout_Hole)
                              (MODE = Mode_Ball_In_Play)
                            else if (Sol_Ball_In_Play)
                              (MODE = Mode_Start_Ball)
                            else
                              {(MODE = Mode_Error) (TEXT = "Can't find ball")}}
   
   Proc_Start_Ball_Init    {(START Timeout_Kickout_Timer) (KICK Sol_Ball_In_Play) (Var_kick_retries = 0)}
   
   Proc_Start_Ball_Start   {if (Inp_Ball_At_Plunger)
                              (MODE = Mode_Ball_In_Play)
                           if (EXPIRED Timeout_Kickout_Timer)
                              {(Var_kick_retries++)
                              if (Var_kick_retries > 5)
                                 {(MODE = Mode_Error) (TEXT = "Ball kick failed!")}
                              (START Timeout_Kickout_Timer) (KICK Sol_Ball_In_Play)}}
                              
   Proc_Ball_In_Play_Init  {(LED_BLINK_100, Led_Inlane_Center) (LED_OFF, (Led_Inlane_Left |
                              Led_Inlane_Right | Led_Left_Target1 | Led_Left_Target2 |
                              Led_Right_Target1 | Led_Right_Target2 | Led_Special))
                              (Var_prev_flipper = 0) (Var_targets = 0) (Var_tilted = 0)}
   
   Proc_Ball_In_Play_Start {if (Inp_Inlane_Left || Inp_Inlane_Right)
                              (MODE = Mode_Normal_Play)
                           if (Inp_Inlane_Center)
                              {(SOUND Sound_Ding_Ding) (TEXT = "Skill Shot")
                              (IndVar_score[Var_currPlayer] += 1000) (MODE = Mode_Normal_Play)}}
   
   Proc_Normal_Play_Init   {(LED_SET, (Led_Inlane_Left | Led_Inlane_Center | Led_Inlane_Right), IndVar_InlaneLights[Var_currPlayer])}
   
   Proc_Normal_Play        {Proc_Tilt, Proc_Flipper, Proc_Inlane, Proc_Targets, Proc_Kickout_Hole,
                              Proc_Start_and_Coin, Proc_Ball_Drain}
   
   Proc_End_Of_Ball        {if (Var_tilted == 0)
                              {(TEXT = "Bonus %d", (IndVar_scoreLvl[Var_currPlayer] * 1000))
                              (IndVar_score[Var_currPlayer] += (IndVar_scoreLvl[Var_currPlayer] * 1000))
                              (WAIT 3000)}
                           (Var_currPlayer++)
                           if (Var_currPlayer >= Var_numPlayers)
                              {(Var_currPlayer = 0) (Var_ballNum++)
                              if (Var_ballNum >= Var_ballsPerGame)
                                 {(TEXT = "Game Over")(WAIT 3000)
                                 if (Var_credits == 0)
                                    (MODE = Mode_Attract)
                                 else
                                    (MODE = Mode_Press_Start)}
                              else
                                 {(TEXT = "Player %d, Ball %d", (Var_currPlayer + 1), (Var_ballNum + 1))
                                 (MODE = Mode_Start_Ball)}}
                           else
                              {(TEXT = "Player %d, Ball %d", (Var_currPlayer + 1), (Var_ballNum + 1))
                              (MODE = Mode_Start_Ball)}}
   
   Proc_Inlane_Comp        {(TEXT = "Inlanes Complete!!")(IndVar_scoreLvl[Var_currPlayer]++)
                           (IndVar_score[Var_currPlayer] += 1000)
                           (IndVar_InlaneLights[Var_currPlayer] = 0)
                           (LED_OFF, (Led_Inlane_Left | Led_Inlane_Center | Led_Inlane_Right))
                           (MODE = Mode_Normal_Play)}
   
   Proc_Targets_Comp_Init  {(LED_BLINK_100, Led_Special)(TEXT = "Super Mode!")
                           (IndVar_specialLvl[Var_currPlayer]++)
                           (IndVar_score[Var_currPlayer] += (IndVar_specialLvl[Var_currPlayer] * 1000))
                           (START Timeout_Special_Timer)}
   
   Proc_Targets_Comp_State {if (Sol_Kickout_Hole)
                              {(TEXT = "Jackpot")(VIDEO Video_Defcon19)
                              (IndVar_score[Var_currPlayer] += (IndVar_specialLvl[Var_currPlayer] * 1000))}
                           if (EXPIRED Timeout_Special_Timer)
                              (MODE = Mode_Normal_Play)
                           (Proc_Normal_Play)}
}

LED_CHAINS
{
   #Name                   Processing (Mask, bits, cmd, bits, cmd, ...)
   LedCh_Attract           {(Led_Inlane_Left | Led_Inlane_Center | Led_Inlane_Right |
                              Led_Left_Target1 | Led_Left_Target2 | Led_Right_Target1 | Led_Right_Target2 |
                              Led_Special), 0, WAIT 100, Led_Special, WAIT 100, (Led_Left_Target1 | Led_Right_Target1),
                              WAIT 100, (Led_Left_Target2 | Led_Right_Target2), WAIT 100,
                              (Led_Inlane_Left | Led_Inlane_Right), WAIT 100, Led_Inlane_Center, REPEAT}
   
   LedCh_Tilt              {(Led_Inlane_Left | Led_Inlane_Center | Led_Inlane_Right |
                              Led_Left_Target1 | Led_Left_Target2 | Led_Right_Target1 | Led_Right_Target2 |
                              Led_Special), 0, END_CHAIN}
}

SOUND_CHAINS
{
   #Name                   Processing (sound, cmd, sound, cmd, ...)
   SndCh_Start             { Sound_Open_Door, WAIT 5000, REPEAT}
}

VIDEO_CHAINS
{
   #Name                   Processing (video, cmd, video, cmd, ...)
   VidCh_Attract           { Video_Defcon17, REPEAT}
}

IMAGE_CHAINS
{
   #Name                   Processing (image, cmd, image, cmd, ...)
   ImageCh_Attract         { Image_Left_Guy, WAIT 1000, Image_Right_Guy, WAIT 1000,
                             Image_LeftCtr_Guy, WAIT 1000, Image_Full_Band, WAIT 1000, REPEAT}
}

MODES
{
   #Name                   Desc			InitChain                  ProcessChain                                       VideoChain
   #                                      		AudioChain                                  LedChain                                       InitScoringNum
   Mode_Init               "Init"		{(Proc_Init)               ()                                                 ()
                                          		()                                          ()                                             ()}
   Mode_Attract            "Attract"	{()                        (Proc_Init, Proc_Add_Coin)                         (ImageCh_Attract)
                                          		()                                          (LedCh_Attract)                                ()}
   Mode_Press_Start        "PrssStrt"	{()                        (Proc_Start_and_Coin)                              (Image_Full_Band)
                                          		(SndCh_Start)                               (LedCh_Attract)                                ()}
   Mode_Start_Game         "StrtGame"	{(Proc_Init_Game)          (Proc_Start_Game, Proc_Start_and_Coin)             ()                        
                                          		()                                          ()                                             ()}
   Mode_Start_Ball         "StrtBall"	{(Proc_Start_Ball_Init)    (Proc_Start_Ball_Start, Proc_Start_and_Coin)       ()
                                          		()                                          ()                                             ()}
   Mode_Ball_In_Play       "BallInPlay"	{(Proc_Ball_In_Play_Init)  (Proc_Ball_In_Play_Start, Proc_Start_and_Coin)     ()
                                          		()                                          ()                                             ()}
   Mode_Normal_Play        "NormalPlay"	{(Proc_Normal_Play_Init)   (Proc_Normal_Play)                                 ()
                                          		()                                          ()                                             ()}
   Mode_Error              "Error"		{()                        ()                                                 ()
                                          		()                                          ()                                             ()}
   Mode_Tilt               "Tilt"		{(Proc_Tilt_Init)          (Proc_Tilt_State)                                  ()
                                          		(Sound_Wah_Wuh)                             (LedCh_Tilt)                                   ()}
   Mode_End_Of_Ball        "EndOfBall"	{(Proc_End_Of_Ball)        ()                                                 ()
                                          		()                                          ()                                             ()}
   Mode_Inlane_Complete    "InlnComp"	{(Proc_Inlane_Comp)        ()                                                 ()
                                          		()                                          ()                                             ()}
   Mode_Targets_Complete   "TrgtComp"	{(Proc_Targets_Comp_Init)  (Proc_Targets_Comp_State)                          ()
                                          		()                                          ()                                             ()}
}

FIRST_MODE                 Mode_Init
